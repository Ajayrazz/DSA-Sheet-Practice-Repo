/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> allPath = new ArrayList<>();
        List<Integer> currentPath = new ArrayList<>();
        Helper(root, targetSum, currentPath, allPath);

        return allPath;
    }

    //Helper Function
    private void Helper(TreeNode root, int targetSum, List<Integer> currentPath, List<List<Integer>> allPath){
        //Base case
        if(root == null){
            return;
        }

        currentPath.add(root.val);

        if(root.val == targetSum && root.left == null && root.right == null){
            allPath.add(new ArrayList<>(currentPath));
        }
        else {
            //traverse the left sub tree
            Helper(root.left, targetSum - root.val, currentPath, allPath);
            
            //traverse the right sub tree
            Helper(root.right, targetSum - root.val, currentPath, allPath);
        }

        currentPath.remove(currentPath.size() - 1);
    }
}
